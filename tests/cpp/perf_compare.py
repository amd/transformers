import argparse
import csv
import os
import statistics
import sys

import pandas as pd


def main():

    # # Create a parser
    parser = argparse.ArgumentParser(description="Compare perf with golden")

    parser.add_argument(
        "--new_perf",
        type=str,
        required=True,
        help="CSV file generated by summarize perf",
    )

    parser.add_argument(
        "--golden_perf",
        type=str,
        required=True,
        help="CSV file containing thr golden data",
    )

    parser.add_argument(
        "--tolerance_limit",
        type=float,
        default=1.0,
        help="Maximum acceptable performace degradation in percentage",
    )

    args = parser.parse_args()

    if not os.path.exists(args.new_perf):
        raise FileNotFoundError("- Error: No such file {}".format(args.new_perf))

    if not os.path.exists(args.golden_perf):
        raise FileNotFoundError("- Error: No such file {}".format(args.golden_perf))

    df1 = pd.read_csv(args.new_perf)
    df2 = pd.read_csv(args.golden_perf)

    latency_col = "Executetime(ns)"

    threshold = -args.tolerance_limit
    count = 0
    m_list = []
    k_list = []
    n_list = []
    group_size_list = []
    diff_list = []

    if latency_col in df1.columns and latency_col in df2.columns:

        for index, row in df2.iterrows():

            m = row["M"]
            n = row["N"]
            k = row["K"]
            group_size = row["group_size"]

            matching_row = df1[
                (df1["M"] == m)
                & (df1["N"] == n)
                & (df1["K"] == k)
                & (df1["group_size"] == group_size)
            ]

            if not matching_row.empty:

                latency_diff = (
                    (row["Executetime(ns)"] - matching_row.iloc[0]["Executetime(ns)"])
                    / row["Executetime(ns)"]
                ) * 100

                if latency_diff < threshold:
                    count += 1
                m_list.append(m)
                n_list.append(n)
                k_list.append(k)
                group_size_list.append(group_size)
                diff_list.append(latency_diff)

            else:
                print(
                    f"The shape ({m}, {n}, {k}) and group size ({group_size}) present in the golden file is not found in the new perf sheet.. Skipping"
                )

        if count > 0:
            print(
                f"Performance check failed. Number of shapes with perf degradation is: {count}"
            )
        else:
            print("All shapes passed")

        # name of csv file
        filename = "performance_diff.csv"
        fields = ["M", "N", "K", "group_size", "perf_improvement(%)"]
        data_lists = [m_list, n_list, k_list, group_size_list, diff_list]

        # writing to csv file
        with open(filename, mode="w", newline="") as csvfile:
            # creating a csv dict writer object
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            for i in range(len(data_lists[0])):
                row_values = [data[i] for data in data_lists]
                csvwriter.writerow(row_values)

    else:
        print(
            "Executetime(ns) column does not exist in your csv file. Please check your file"
        )


if __name__ == "__main__":
    main()
